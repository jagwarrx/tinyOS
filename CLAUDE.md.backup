# Lexical Notes App - LLM Context Documentation

> **Note:** This is a condensed overview. For detailed technical specifications, see `CLAUDE-EXTENSIVE.md`.

## Overview

A knowledge and task management application combining rich-text note-taking with powerful task management. Built on Lexical editor (Meta), featuring bidirectional note linking, reference IDs for cross-linking, task scheduling, projects, hierarchical tagging, and a built-in terminal for quick commands.

**Tech Stack:** React 18, Lexical, Supabase (PostgreSQL), Tailwind CSS, Vite, Lucide React

## Core Concepts

### 1. Notes System
- Built on Lexical editor with rich formatting (bold, underline, highlights, code, lists, links)
- Unique **reference IDs** (e.g., `a3x7k9`) for permanent linking
- Bidirectional navigation (up/down/left/right relationships)
- Special note types: HOME, Inbox, Tasks, Today, Week, Projects, Log, Diagrams

### 2. Tasks System
- Separate database table (not in note content)
- Statuses: BACKLOG, PLANNED, DOING, BLOCKED, OVERDUE, DONE, CANCELLED
- Scheduling with natural language dates ("Today", "Tomorrow", "Mon")
- Project organization, starring, types (null, 'next', 'waiting', 'someday')
- Hierarchical tagging with slash-separated paths

### 3. Special Pages
- **HOME**: Main entry point
- **Inbox**: Quick capture
- **Tasks**: Master list (List and Kanban views)
- **Today**: Starred + scheduled for today
- **Week/Someday**: Filtered task views
- **Projects**: Project list and individual project notes
- **Log**: Activity tracking (press 'L' to navigate)

## Database Schema (Brief)

**Tables:** notes, tasks, activity_log, settings, tags, task_tags, note_tags

See `CLAUDE-EXTENSIVE.md` for complete schema details and `schema.sql` for SQL definitions.

**Key Fields:**
- Notes: `ref_id`, `note_type`, `content` (JSONB), `diagram_xml/svg`, bidirectional links
- Tasks: `ref_id`, `status`, `priority`, `scheduled_date`, `project_id`, `workspace_data`, tags
- Tags: `full_path` (e.g., "work/qbotica/projects"), `level`, hierarchical structure

## Key Features (Summary)

### 1. Reference ID Linking
- 6-char unique IDs (format: `[a-z][0-9][a-z0-9]{4}`)
- Type ref_id in note → becomes clickable badge → navigates to target
- Works for notes, tasks, and diagrams

### 2. Hierarchical Tagging
- Multi-level tags: `work/qbotica/projects/calvetti`
- Autocomplete filtered by hierarchy level
- Leaf tag display to reduce clutter
- Filter tasks by tags (includes descendants)
- See `CLAUDE-EXTENSIVE.md` for tag service methods

### 3. Workspace Mode
- Full-screen focused work environment per task
- Split view: scratchpad (left) + AI chat (right)
- Session tracking: "This Session: 5m (Total: 23m)"
- Data persistence (>2min sessions saved to DB)
- Built-in collapsible terminal
- See `CLAUDE-EXTENSIVE.md` for detailed workflow

### 4. Draw.io Diagram Integration
- Embedded Draw.io editor (embed.diagrams.net)
- Dual storage: XML (editing) + SVG (preview)
- Inline previews via ref_id in notes
- Command: `/diagram "Title"`
- See `CLAUDE-EXTENSIVE.md` for PostMessage API details

### 5. Terminal Commands
```bash
/task "Text" [:today] [:project] [:note "Details"]
/project "Name" | /diagram "Title" | /inbox "Title"
goto home | tasks | today | week | projects | inbox
start timer 25 | complete task N | star task N
/joke | /tip | /quote | /fact | /ask <query>  # Claude AI
help
```
See `CLAUDE-EXTENSIVE.md` for complete command list

### 6. Other Key Features
- **20+ Themes**: 7 collections (Terminal, Sonokai, Monokai Pro, Claude AI, Things 3, Trello) - see `themes.md`
- **Font Customization**: 10+ fonts with ligature support
- **UI Modes**: Standard, Hacker Terminal, Expanded View
- **Global Search**: Fuzzy search across notes/tasks with keyboard navigation
- **Activity Logging**: Comprehensive tracking with smart grouping and filters
- **Music Player**: Floating Spotify/YouTube player
- **Kanban Board**: Drag-and-drop task cards
- **Keyboard Shortcuts**: Press `?` for help modal
- **Claude AI Integration**: Supabase Edge Function for secure API calls

## Component Structure

```
src/
   App.jsx                      # State management, command handling
   components/                  # UI components (Editor, TaskList, Terminal, etc.)
   lexical/                     # RefIdNode, RefIdTransformPlugin
   utils/                       # commandParser, dateUtils, tagUtils, workspaceStorage
   services/                    # notesService, tasksService, tagService, claudeService, etc.
   hooks/                       # useAutoSave
   config/                      # themes/, fonts.js, uiModes.js
```

See `CLAUDE-EXTENSIVE.md` for detailed component specifications

## State Management (App.jsx)

**Key state:** notes, selectedNote, currentTasks, allTasks, selectedTask, currentTheme, statusFilter, taskTypeFilter, view (list/kanban), showSearch, showSettings, uiPreferences

See `CLAUDE-EXTENSIVE.md` for complete state list

## Service Methods (Summary)

- **NotesService**: fetchAll, fetchByRefId, create, update, delete
- **TasksService**: fetchAll, fetchByRefId, create, update, scheduleTask, reorderTasks
- **TagService**: createTagsFromPath, tagTask, getTaskLeafTags, filterTasksByTags
- **ClaudeService**: callClaude, getJoke, getTip, explainConcept, brainstormIdeas
- **ActivityLogService**: fetchAll, create, update, deleteById
- **SettingsService**: getSetting, setSetting, getUIPreferences
- **ThemeService**: loadAndApplyTheme, changeTheme
- **MusicLinksService**: fetchAllMusicLinks, createMusicLink, setAsDefault

See `CLAUDE-EXTENSIVE.md` for complete method signatures and options

## Important Behaviors

- **Optimistic Updates**: UI updates first, DB second, rollback on error
- **Auto-save**: Debounced saves for notes
- **Task Order**: Priority field (0 = highest)
- **OVERDUE Detection**: Automatic on task fetch (past scheduled_date)
- **Ref ID Generation**: PostgreSQL function `generate_reference_id()`
- **URL Routing**: `/<ref_id>` format with history.pushState

See `CLAUDE-EXTENSIVE.md` for detailed workflows

## Common Tasks

**Add terminal command:** Update `commandParser.js` + `App.jsx` handler
**Add task status:** Update `TaskList.jsx` options + color coding
**Modify ref_id detection:** Update `refIdLookup.js` + `RefIdTransformPlugin.jsx`
**Add special view:** Create note with `note_type`/`list_metadata` + `App.jsx` handler

## Tips for LLMs

1. **App.jsx** is the central hub - check it first
2. Use **optimistic updates** (UI first, DB second, rollback on error)
3. **Lexical state** is JSONB - use Lexical API
4. **Ref_id format** is strict: `[a-z][0-9][a-z0-9]{4}`
5. **OVERDUE status** is automatic - not user-selectable
6. **Special notes** identified by `note_type` or `list_metadata`
7. **Task order**: Sort by `priority` ASC
8. **Date handling**: Use `dateUtils.js` functions
9. **Tag paths**: Use slash-separated hierarchy, validate with `tagUtils.js`
10. **Terminal commands**: Case-insensitive

## Token Optimization Guidelines

**To minimize token usage when working with LLMs:**

### 1. Selective File Reading
- **Only read files you need** - Don't preemptively read entire codebase
- Use **Grep/Glob first** to locate relevant files before reading
- Read files **on-demand** as specific information is needed
- Use **Read with offset/limit** for large files (only read relevant sections)

### 2. Strategic Use of CLAUDE.md
- This file (~8K tokens) is loaded by default in context
- For simple tasks, this summary should be sufficient
- **Only request CLAUDE-EXTENSIVE.md** (~15K tokens) when you need:
  - Detailed workflow explanations
  - Complete service method signatures
  - Debugging procedures
  - Implementation examples
  - Database schema details

### 3. Ask Before Reading
- When user requests a feature, **ask clarifying questions first**
- Identify the **minimum set of files** needed
- User can guide you to relevant files, saving exploration time

### 4. Leverage Existing Knowledge
- This file contains enough context for most common tasks:
  - Adding terminal commands
  - Modifying task statuses
  - Understanding data flow
  - Basic debugging
- Check this file before requesting additional documentation

### 5. Efficient Search Patterns
```bash
# Good: Targeted search
Grep for "scheduleTask" in services/

# Bad: Broad search consuming tokens
Read all files in services/ directory
```

### 6. Reference by Location
- When you find something once, **note the file path**
- Reference it as: "See src/services/tasksService.js:45" instead of re-reading
- Trust your memory from earlier in the conversation

### 7. Use Context Clues
- File paths in this doc point to relevant locations
- Error messages often indicate the problematic file
- Terminal commands map to `commandParser.js` first, then `App.jsx` handlers

### Example Token-Efficient Workflow:
```
User: "Add a new task status called IN_REVIEW"

❌ Bad (high tokens):
1. Read App.jsx (1000+ lines)
2. Read TaskList.jsx (500+ lines)
3. Read CLAUDE-EXTENSIVE.md (15K tokens)
4. Read TasksService.js

✅ Good (low tokens):
1. Check CLAUDE.md "Common Tasks" section (already in context)
2. Grep for "BACKLOG|PLANNED|DOING" to find status definitions
3. Read only TaskList.jsx (confirmed by grep)
4. Make changes
```

**Remember:** This condensed file exists to keep you productive while minimizing token costs. Read additional files only when this summary proves insufficient for the task at hand.

## Documentation Files

- **README.md**: General project overview
- **CLAUDE.md** (this file): Quick LLM context
- **CLAUDE-EXTENSIVE.md**: Detailed specifications, workflows, debugging
- **themes.md**: Theme system documentation
- **schema.sql**: Complete database schema

## Debugging Quick Reference

- Browser console for Supabase errors
- Verify migrations: `SELECT * FROM notes LIMIT 1;`
- Check ref_id: `SELECT generate_reference_id();`
- Today view: Check `is_starred` and `scheduled_date`
- Claude AI: Check Edge Function deployment + secrets
- Theme issues: Check CSS variables + `themes/index.js`
- Diagrams: Check PostMessage events in console + SVG decoding
- Tags: Verify tag paths with `validateTagPath()`

See `CLAUDE-EXTENSIVE.md` for comprehensive debugging guide

## Environment Setup

```bash
npm install
# Configure Supabase project + run schema.sql
# Create .env with VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY
# Optional: Deploy Claude AI Edge Function
npm run dev  # Visit http://localhost:5173
```

See `CLAUDE-EXTENSIVE.md` for detailed setup instructions

---

**For detailed information:** All comprehensive technical details, API specs, workflows, and examples are in `CLAUDE-EXTENSIVE.md`. This file provides quick reference; consult the extensive file for implementation details.
