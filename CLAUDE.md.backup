# Lexical Notes App - LLM Context Documentation

## Overview

This is a knowledge and task management application that combines rich-text note-taking with a powerful task management system. It's designed for personal productivity with unique features like bidirectional note linking, reference IDs for cross-linking, task scheduling, projects, and a built-in terminal for quick commands.

## Core Concepts

### 1. Notes System
- **Notes** are the primary content type, built on the Lexical editor (Meta's rich text framework)
- Notes support rich formatting: bold, underline, highlights, code blocks, lists, links
- Notes have unique **reference IDs** (e.g., `a3x7k9`) that act as permanent links
- Notes can be linked to other notes bidirectionally (up/down/left/right navigation)

### 2. Tasks System
- **Tasks** are stored in a separate database table (not in note content)
- Tasks can be organized into projects
- Tasks have statuses: BACKLOG, PLANNED, DOING, BLOCKED, OVERDUE, DONE, CANCELLED
- Tasks can be scheduled to specific dates with natural language display
- Tasks can be starred to appear in the "Today" view

### 3. Special Pages
The app has several special note types that act as views:
- **HOME**: Main entry point (is_home: true)
- **Inbox**: Quick capture for ideas/items to process later
- **Tasks**: Master list of all tasks
- **Today**: Shows starred tasks + tasks scheduled for today
- **Week**: Filtered task view (uncompleted tasks)
- **Someday**: Tasks you might do someday
- **Projects**: List of all projects (note_type: 'project_list')
- **Individual Projects**: Each project is a note (note_type: 'project')

## Database Schema

### Notes Table
```
id: UUID (primary key)
title: TEXT
content: JSONB (Lexical editor state)
note_type: TEXT (null, 'task_list', 'project', 'project_list')
ref_id: TEXT UNIQUE (e.g., 'a3x7k9')
is_home: BOOLEAN
is_starred: BOOLEAN
list_metadata: JSONB (for special views like Today, Week)
up_id, down_id, left_id, right_id: UUID (bidirectional links)
project_status: TEXT (for project notes)
project_start_date: TEXT
project_due_date: TEXT
project_context: TEXT
created_at, updated_at: TIMESTAMP
```

### Tasks Table
```
id: UUID (primary key)
text: TEXT (task description)
status: TEXT (BACKLOG, PLANNED, DOING, BLOCKED, OVERDUE, DONE, CANCELLED)
priority: INTEGER (0 = highest)
project_id: UUID (references notes.id)
scheduled_date: TEXT (YYYY-MM-DD format or natural language)
is_starred: BOOLEAN
task_type: TEXT (null, 'next', 'waiting', 'someday')
context: TEXT (why this task matters)
work_notes: TEXT (how to do it, blockers, etc.)
ref_id: TEXT UNIQUE (e.g., 'b5m2n8')
created_at, updated_at: TIMESTAMP
```

## Key Features

### 1. Reference ID Linking
- Every note and task gets a unique 6-character ref_id (format: `[a-z][0-9][a-z0-9]{4}`)
- Type a ref_id in a note (e.g., `a3x7k9`) and it becomes a clickable badge
- Badges display as `[NOTE | Note Title] a3x7k9` or `[TASK | Task Text] b5m2n8`
- Clicking a badge navigates to that note or shows task details
- Implemented via custom Lexical nodes: `RefIdNode` and `RefIdTransformPlugin`

### 2. Task Scheduling
- Tasks can be scheduled to specific dates
- Dates display naturally: "Today", "Tomorrow", "Mon", "Wed, Dec 25"
- When scheduling a BACKLOG task, it auto-changes to PLANNED
- Tasks scheduled for today automatically appear in the Today view
- OVERDUE status is automatically set for tasks past their scheduled_date
- See: `src/utils/dateUtils.js` for date formatting

### 3. Project Management
- Projects are special notes with `note_type: 'project'`
- Tasks can be linked to projects via `task.project_id � notes.id`
- Projects have status (ACTIVE, COMPLETED, ON_HOLD, ARCHIVED), dates, and context
- Projects page shows statistics: total tasks, completed, active

### 4. Terminal Commands
Quick command interface for productivity. Commands include:

```bash
# Task management
/task "Task text" [:today] [:project] [:note "Details"]
/inbox "Item title" :note "Details"
complete task N
star task N

# Navigation
goto home
goto tasks
goto today
goto week
goto projects
goto inbox

# Projects
/project "Project Name"

# Timer
start timer 25

# Claude AI Commands (requires Edge Function setup)
/joke          # Get a programming joke
/tip           # Get a productivity tip
/quote         # Get an inspiring quote
/fact          # Get a tech fact
/ask <query>   # Ask Claude anything
/explain <concept>  # Get explanation
/brainstorm <topic> # Brainstorm ideas

# Help
help
```

See: `src/utils/commandParser.js` for full command parsing logic

### 5. Timer Feature
- Pomodoro-style timer with customizable durations
- Can be minimized while working
- Displays remaining time
- Pause/resume functionality
- See: `src/components/Timer.jsx`

### 6. Task Status System
- **BACKLOG**: Not yet planned
- **PLANNED**: Scheduled or planned (shows circle icon)
- **DOING**: Currently working on (blue)
- **BLOCKED**: Waiting on something (yellow)
- **OVERDUE**: Auto-set for tasks past scheduled_date (red, bold)
- **DONE**: Completed (green)
- **CANCELLED**: Won't do (red)

OVERDUE is special: it's automatically set by the system when tasks are fetched, not manually selectable.

### 7. Today View Logic
Shows tasks that meet ANY of these criteria:
- Task is starred (is_starred = true)
- Task is scheduled for today's date
- Excludes CANCELLED tasks
- Includes DONE tasks if they match criteria

### 8. Task Filtering
- Filter by status (multi-select checkboxes)
- Filter by task type (radio buttons: null, 'next', 'waiting', 'someday')
- Collapsible filter bar in UI
- See: `src/components/StatusFilter.jsx` and `src/components/CollapsibleFilterBar.jsx`

### 9. Bidirectional Navigation
- Notes can link to other notes via up/down/left/right relationships
- Example: Projects page � left_id points to individual projects
- Individual projects � left_id points back to Projects page
- Enables graph-like navigation through notes

### 10. Advanced Theme System
- **20+ Professional Color Schemes** organized into 7 collections
- Collections: Original Classic (3), Terminal (5), Sonokai (6), Monokai Pro (5), Claude AI (2), Things 3 (2), Trello (1)
- **Dynamic CSS Variables** for instant theme switching without page reloads
- **WYSIWYG Theme Previews** in Settings showing actual UI appearance
- **Dual Persistence**: Database (settings table) + localStorage cache
- **Special Features**: Gradient backgrounds (Trello), theme-specific colors, dark mode support
- See: `src/config/themes/` for theme definitions, `src/services/themeService.js` for management
- Reference: `themes.md` for complete documentation

### 11. Font Customization
- **10+ Font Options** including JetBrains Mono, Fira Code, Source Code Pro, IBM Plex Mono, Inter, SF Pro
- Support for **programming ligatures** (JetBrains Mono, Fira Code, Cascadia Code)
- Categories: Monospace (for code/terminal aesthetic) and Sans-Serif (for modern UI)
- Dynamic loading from Google Fonts or system fonts
- Persisted to localStorage
- See: `src/config/fonts.js`

### 12. UI Mode Selection
- **Standard**: Modern, polished interface with rounded corners and shadows
- **Hacker Terminal**: Raw terminal aesthetic with high information density (default)
- **Expanded View**: Distraction-free full-width layout with centered content
- Applied via CSS class on document root
- See: `src/config/uiModes.js`

### 13. Global Search
- **Fuzzy Search** across notes and tasks with intelligent scoring
- **Keyboard Navigation** (↑/↓ arrows, Enter to select, Esc to close)
- Searches: Note titles, note content (extracted from Lexical JSON), task text, context, work notes
- **Grouped Results** (Notes, Tasks) with top 5 results each
- Shows preview snippets and ref_id for quick identification
- See: `src/components/SearchModal.jsx`

### 14. Activity Logging
- **Comprehensive Activity Tracking**: All task/note/project actions logged automatically
- **Activity Types**: Task operations, note updates, project changes, timer events, reminders, custom text logs
- **Smart Grouping**: Consecutive note edits grouped automatically
- **Time Filters**: Today, Yesterday, This Week, All Time
- **Category Filters**: Text Logs, Task Activity, Note Activity, Reminders, Other
- **Inline Editing**: Edit text logs and reminders directly
- **Expandable Groups**: Collapse/expand note edit groups and long text
- Logged to `activity_log` table with timestamp, action type, entity references
- See: `src/components/LogPage.jsx`, `src/services/activityLogService.js`

### 15. Background Music Player
- **Floating Audio Player** with Spotify and YouTube integration
- **Multi-Source Support**: Add multiple Spotify playlists and YouTube videos
- **Default Selection**: Mark favorite sources as default
- **Minimizable Interface**: Player runs in background while working
- **Music Links Management**: Add/edit/delete music sources in Settings
- Stored in `settings` table as `music_links` key
- See: `src/components/FloatingAudioPlayer.jsx`, `src/services/musicLinksService.js`

### 16. Kanban Board View
- **Drag-and-Drop** task cards between columns
- **5 Columns**: Backlog, Planned, Waiting, Doing, Done
- **Visual Task Cards** with priority badges, status indicators, scheduled dates
- **Project Integration**: Shows project name on task cards
- **Auto-Status Update**: Dragging task to column updates status automatically
- Color-coded columns with task counts
- See: `src/components/KanbanBoard.jsx`

### 17. Keyboard Shortcuts
- **Global Shortcuts**: ?, Cmd/Ctrl+K (search - coming soon), Esc, Tab
- **Navigation**: L (Log page), Arrow keys (note navigation)
- **Task Management**: Space (quick entry), ↑/↓ (select), Shift+↑/↓ (reorder), → (open panel), ← (close)
- **Editor**: Cmd/Ctrl+B/I/U (formatting), Cmd/Ctrl+Z (undo), Cmd/Ctrl+K (link)
- **Help Modal**: Press ? anytime to show shortcuts reference
- See: `src/components/KeyboardShortcutsHelp.jsx`

### 18. Centralized Settings
- **Settings Modal** with tabbed interface (General, Theme, Music)
- **General Tab**: UI preferences (task score formula visibility)
- **Theme Tab**: UI Mode selection, Font selection, Color Scheme picker with live previews
- **Music Tab**: Manage Spotify/YouTube links, set defaults
- All settings persisted to database `settings` table
- See: `src/components/SettingsModal.jsx`, `src/services/settingsService.js`

### 19. Claude AI Integration
- Direct Claude API integration via Supabase Edge Function
- Secure API key management (stored in Supabase secrets)
- Quick AI commands for jokes, tips, quotes, facts, and explanations
- Custom loading animation with wave bounce effect while waiting for responses
- Uses Claude Sonnet 4.5 model (`claude-sonnet-4-5`)
- See: `src/services/claudeService.js` and `supabase/functions/claude-proxy/`

**Setup Requirements:**
1. Deploy Edge Function: `supabase functions deploy claude-proxy`
2. Set API key: `supabase secrets set CLAUDE_API_KEY=sk-ant-api03-...`
3. Edge Function handles CORS and secure API calls
4. Temperature range: 0-1 (default: 1.0)
5. Max tokens configurable per command (default: 1024)

**Loading Animation:**
- Three bouncing dots with staggered wave effect
- Smooth opacity and scale transitions
- "Thinking..." text with pulse animation
- Implemented with custom CSS keyframes (`@keyframes loadingWave`)
- See: `src/index.css` and `src/components/Terminal.jsx`

## Component Structure

```
src/
   App.jsx                           # Main app, state management, command handling
   components/
      Editor.jsx                    # Lexical rich text editor
      NoteEditor.jsx                # Note editing view with editor
      NotesList.jsx                 # Sidebar list of notes
      TaskList.jsx                  # Displays tasks with actions
      TaskDetail.jsx                # Detailed task view/edit panel
      Terminal.jsx                  # Command line interface
      Timer.jsx                     # Pomodoro timer
      DatePicker.jsx                # Date selection for scheduling
      StatusFilter.jsx              # Task status filter UI
      CollapsibleFilterBar.jsx     # Filter bar with collapse
      RefIdBadge.jsx                # Badge for ref_id display
      ProjectsList.jsx              # Projects view
      InboxList.jsx                 # Inbox items view
   lexical/
      RefIdNode.jsx                 # Custom Lexical node for ref_ids
      RefIdTransformPlugin.jsx     # Auto-transforms ref_ids to badges
   utils/
      commandParser.js              # Terminal command parsing
      dateUtils.js                  # Date formatting utilities
      refIdLookup.js                # Ref_id lookup utilities
   services/
      notesService.js               # CRUD for notes
      tasksService.js               # CRUD for tasks
   contexts/
      NotesContext.jsx              # (If using context)
   hooks/
       useAutoSave.js                # Auto-save hook for notes
```

## State Management (App.jsx)

Key state variables:
- `notes`: All notes from database
- `selectedNote`: Currently viewed note
- `currentTasks`: Tasks for current view
- `allTasks`: All tasks (for statistics)
- `selectedTask`: Task detail panel
- `homeNote`, `tasksNote`, `todayNote`, `weekNote`, `projectsNote`, `inboxNote`, `somedayNote`: Special note references
- `theme`: 'light' or 'dark'
- `timerConfig`: Timer state
- `statusFilter`: Array of status values to filter by
- `taskTypeFilter`: Single task type value

## Important Behaviors

### Optimistic Updates
Most CRUD operations use optimistic UI updates for instant feedback, with rollback on error.

### Auto-save
Notes auto-save after a debounce period (see `useAutoSave` hook).

### Task Order
Tasks have a `priority` field (lower number = higher priority). Tasks are displayed in priority order.

### OVERDUE Detection
On every task fetch (page load, view change), the system checks for tasks with:
- `scheduled_date` in the past
- Status NOT IN (DONE, CANCELLED, OVERDUE)

These are automatically updated to OVERDUE status.

### Reference ID Generation
Handled by PostgreSQL function `generate_reference_id()`:
- Format: `[a-z][0-9][a-z0-9]{4}` (6 chars)
- First char: lowercase letter
- Second char: digit
- Remaining 4: alphanumeric lowercase
- Guaranteed unique via UNIQUE constraint and retry logic

## API / Service Methods

### NotesService (src/services/notesService.js)
- `fetchAll()`: Get all notes
- `fetchById(id)`: Get note by UUID
- `fetchByRefId(refId)`: Get note by ref_id
- `create(note)`: Create new note
- `update(id, changes)`: Update note
- `delete(id)`: Delete note

### TasksService (src/services/tasksService.js)
- `fetchAll()`: Get all tasks
- `fetchByProject(projectId)`: Get tasks for project
- `fetchByRefId(refId)`: Get task by ref_id
- `create(task)`: Create new task
- `update(id, changes)`: Update task
- `delete(id)`: Delete task
- `scheduleTask(id, scheduledDate)`: Schedule task (auto-changes status)
- `reorderTasks(tasks)`: Bulk update task priorities

### ClaudeService (src/services/claudeService.js)
- `callClaude(prompt, options)`: Main API call function
  - Options: `maxTokens` (default: 1024), `temperature` (0-1, default: 1.0), `model` (default: claude-sonnet-4-5)
- `getJoke()`: Get a programming joke (200 tokens)
- `getTip()`: Get a productivity tip (200 tokens)
- `getQuote()`: Get an inspiring quote (200 tokens)
- `getFact()`: Get a tech fact (200 tokens)
- `getAdvice(topic)`: Get advice on a topic (300 tokens)
- `explainConcept(concept)`: Explain a concept (400 tokens)
- `summarizeText(text)`: Summarize text (300 tokens)
- `brainstormIdeas(topic)`: Brainstorm ideas (400 tokens)

**Implementation Details:**
- Uses Supabase Edge Function `claude-proxy` for secure API calls
- API key stored in Supabase secrets (never exposed to client)
- CORS configured for cross-origin requests
- Temperature must be between 0 and 1 (API constraint)
- Model: `claude-sonnet-4-5` (latest Sonnet 4.5)
- Anthropic API version: `2023-06-01`

## File Locations for Common Tasks

### Adding a new terminal command
1. Add pattern matching in `src/utils/commandParser.js`
2. Add handler in `App.jsx` handleCommand function

### Adding a new task status
1. Update status options in `src/components/TaskList.jsx`
2. Update color coding in same component

### Modifying ref_id detection
1. Update pattern in `src/utils/refIdLookup.js`
2. Update `RefIdTransformPlugin.jsx` if needed
3. Update database function in SQL migration

### Adding a new special view
1. Create note with appropriate `note_type` or `list_metadata`
2. Add handler in `App.jsx` fetchTasksForView function
3. Add navigation option in sidebar

## Technology Stack

- **React 18**: UI framework
- **Lexical**: Rich text editor (Meta)
- **Supabase**: PostgreSQL database + real-time + auth
- **Tailwind CSS**: Styling
- **Vite**: Build tool
- **Lucide React**: Icons

## Database Schema

Complete database schema in root directory:
- `schema.sql`: Comprehensive database schema including all tables, indexes, and functions
  - Creates `notes` table with bidirectional linking and reference IDs
  - Creates `tasks` table with status, priority, and scheduling
  - Creates `activity_log` table for tracking user actions and reminders
  - Creates `settings` table for app configuration
  - Includes `generate_reference_id()` function for unique ref_id generation

To set up the database:
1. Open Supabase SQL Editor
2. Run the entire `schema.sql` file
3. The app will create initial special notes (HOME, Tasks, Today, etc.) on first run

## Common Workflows

### Creating a new note
1. User clicks "+" in sidebar or uses terminal
2. App creates note in database
3. App adds to notes state
4. App selects new note
5. User edits in NoteEditor

### Adding a task via terminal
1. User types: `/task "Task text" :today :note "Details"`
2. `parseCommand` extracts: text, scheduleToday flag, note text
3. App creates task in database with scheduled_date = today
4. App creates linked note if :note provided
5. Task appears in Today view

### Navigating by ref_id
1. User types `a3x7k9` in a note
2. After 500ms, `RefIdTransformPlugin` detects pattern
3. Plugin looks up ref_id in database via `lookupRefId`
4. If found, creates `RefIdNode` with title and type
5. Node renders as `RefIdBadge` component
6. User clicks badge � `onRefIdNavigate` handler
7. App navigates to note or shows task details

### Scheduling a task
1. User hovers over task → calendar icon appears
2. User clicks icon → DatePicker opens
3. User selects date (or quick option like "Tomorrow")
4. App calls `scheduleTask(taskId, date)`
5. If status is BACKLOG, auto-changes to PLANNED
6. Date displays in purple text next to task
7. If date is today, task appears in Today view

### Using Claude AI commands
1. User types `/joke` in terminal
2. Terminal sets `isLoading` state to true
3. Loading animation appears (wave bounce dots + "Thinking...")
4. `handleCommand` in App.jsx calls `getJoke()` from claudeService
5. claudeService invokes Supabase Edge Function `claude-proxy`
6. Edge Function calls Anthropic API with stored CLAUDE_API_KEY
7. Response returned to client
8. Terminal sets `isLoading` to false
9. Response displayed in terminal output
10. If error occurs, error message displayed with ✗ symbol

## Tips for LLMs Working on This Codebase

1. **Always check App.jsx first**: It's the central hub for state and handlers
2. **Database queries use Supabase client**: See `src/supabaseClient.js`
3. **Lexical editor state is complex**: Stored as JSONB, manipulated via Lexical API
4. **Optimistic updates**: Update UI first, then database. Rollback on error.
5. **Special notes are identified by**: `note_type` field or `list_metadata` field
6. **Task display order**: Sort by `priority` ASC (0 is highest)
7. **Date handling**: Use `dateUtils.js` functions, not raw Date objects
8. **Ref_id format is strict**: Must match `[a-z][0-9][a-z0-9]{4}` pattern
9. **OVERDUE status is automatic**: Don't let users manually select it
10. **Terminal commands are case-insensitive**: Parser uses `.toLowerCase()`

## Known Design Patterns

- **Optimistic UI**: Update UI immediately, sync with DB, rollback on error
- **Debounced saves**: Don't save on every keystroke, wait for pause
- **Ref tracking**: Use refs for components that need direct manipulation (Terminal)
- **Conditional rendering**: Many UI elements shown only on hover (calendar, star icons)
- **Two-step deselection**: On Today page, clicking selected task requires two clicks to deselect

## Future Enhancement Ideas

- Recurring tasks
- Calendar view
- Backlinks panel (show all notes referencing current note)
- Ref_id autocomplete
- Task dependencies
- Subtasks
- Tags/labels
- Search functionality
- Note templates
- Export to Markdown
- Real-time collaboration

## Debugging Tips

- Check browser console for Supabase errors
- Verify database migrations ran: `SELECT * FROM notes LIMIT 1;` should show all columns
- Check ref_id generation: `SELECT generate_reference_id();` should return valid ID
- Task not appearing in Today? Check `is_starred` and `scheduled_date` values
- Badge not appearing? Wait 500ms after typing ref_id
- Navigation not working? Check `left_id`, `right_id`, etc. are valid UUIDs
- Claude commands failing? Check:
  - Edge Function deployed: Visit Supabase Dashboard → Edge Functions
  - Secret set: `supabase secrets list --project-ref <project-ref>`
  - Check browser Network tab for Edge Function errors (500 = missing key, 400 = invalid params)
  - Temperature must be 0-1, not higher
  - Model name must be exact: `claude-sonnet-4-5`

## Environment Setup

1. Install dependencies: `npm install`
2. Set up Supabase project
3. Run all SQL migrations in Supabase SQL Editor
4. Create `.env` file with:
   ```
   VITE_SUPABASE_URL=your-project-url
   VITE_SUPABASE_ANON_KEY=your-anon-key
   ```
5. **Claude AI Setup (Optional):**
   - Get API key from https://console.anthropic.com/
   - Install Supabase CLI: `brew install supabase/tap/supabase`
   - Deploy Edge Function: `supabase functions deploy claude-proxy --project-ref <project-ref>`
   - Set secret: `supabase secrets set CLAUDE_API_KEY=<your-key> --project-ref <project-ref>`
6. Run dev server: `npm run dev`
7. Visit: `http://localhost:5173`

## Documentation Files

- `README.md`: General project overview and setup
- `REFERENCE_ID_IMPLEMENTATION.md`: Deep dive on ref_id system
- `REFID_BADGE_FEATURE.md`: Badge feature implementation details
- `TASK_SCHEDULING_FEATURE.md`: Scheduling feature documentation
- `CLAUDE_AI_COMMANDS.md`: Claude AI integration setup and usage
- `CLAUDE.md` (this file): Comprehensive LLM context -- keep this updated

---

This app is designed for a single user managing their personal knowledge and tasks. The unique features (ref_ids, bidirectional links, terminal) make it particularly powerful for building a connected knowledge base where notes, tasks, and projects all link together seamlessly.
